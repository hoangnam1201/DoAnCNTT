{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useLocation } from 'react-router-dom';\n\nconst useBreadcrumbs = routeConfig => {\n  _s();\n\n  const paths = [];\n  const route = useLocation().pathname;\n  const config = routeConfig;\n  var position = 1;\n\n  while (position !== -1) {\n    paths.push(route.slice(0, position));\n    position = route.indexOf('/', position + 1);\n    if (position === -1 && route !== \"/\") paths.push(route);\n  }\n\n  paths = paths.map(route => {\n    config.find(define => define.path === route);\n  });\n};\n\n_s(useBreadcrumbs, \"EuD9q2dZ34PfN/QO2OBhBzeMxmY=\", false, function () {\n  return [useLocation];\n});\n\nexport default useBreadcrumbs;","map":{"version":3,"sources":["E:/Hoc Tap/Do an CNTT/frontend/src/hooks/useBreadcrumbs.js"],"names":["useLocation","useBreadcrumbs","routeConfig","paths","route","pathname","config","position","push","slice","indexOf","map","find","define","path"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,kBAA5B;;AAEA,MAAMC,cAAc,GAAIC,WAAD,IAAiB;AAAA;;AACpC,QAAMC,KAAK,GAAG,EAAd;AACA,QAAMC,KAAK,GAAGJ,WAAW,GAAGK,QAA5B;AACA,QAAMC,MAAM,GAAGJ,WAAf;AACA,MAAIK,QAAQ,GAAG,CAAf;;AACA,SAAOA,QAAQ,KAAK,CAAC,CAArB,EAAwB;AACpBJ,IAAAA,KAAK,CAACK,IAAN,CAAWJ,KAAK,CAACK,KAAN,CAAY,CAAZ,EAAeF,QAAf,CAAX;AACAA,IAAAA,QAAQ,GAAGH,KAAK,CAACM,OAAN,CAAc,GAAd,EAAmBH,QAAQ,GAAG,CAA9B,CAAX;AACA,QAAIA,QAAQ,KAAK,CAAC,CAAd,IAAmBH,KAAK,KAAK,GAAjC,EACID,KAAK,CAACK,IAAN,CAAWJ,KAAX;AACP;;AACDD,EAAAA,KAAK,GAAGA,KAAK,CAACQ,GAAN,CAAUP,KAAK,IAAI;AACvBE,IAAAA,MAAM,CAACM,IAAP,CAAYC,MAAM,IAAIA,MAAM,CAACC,IAAP,KAAgBV,KAAtC;AACH,GAFO,CAAR;AAGH,CAdD;;GAAMH,c;UAEYD,W;;;AAclB,eAAeC,cAAf","sourcesContent":["import { useLocation } from 'react-router-dom'\r\n\r\nconst useBreadcrumbs = (routeConfig) => {\r\n    const paths = []\r\n    const route = useLocation().pathname\r\n    const config = routeConfig\r\n    var position = 1;\r\n    while (position !== -1) {\r\n        paths.push(route.slice(0, position))\r\n        position = route.indexOf('/', position + 1)\r\n        if (position === -1 && route !== \"/\")\r\n            paths.push(route)\r\n    }\r\n    paths = paths.map(route => {\r\n        config.find(define => define.path === route)\r\n    })\r\n}\r\n\r\nexport default useBreadcrumbs"]},"metadata":{},"sourceType":"module"}